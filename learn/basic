important
    {operator}{count}{motion}
    {count}{operator}{motion}

    number = int
    operator=command -> i,a,r,c,d,y -> them xoa sua, ....
    motion -> phim h j k l w e b  ^ 0 $ g_
    text object:     
vim command -> sau
:! cmd_bash


:q: thoát khỏi vim
:q!: bắt buộc thoát không cần lưu
:w: lưu file
:w!: bắt buộc ghi file (ghi đè)
:wq: lưu xong thoát

:r file.txt Insert the ile ile.txt below the cursor in current buffer.
:0r file.txt Insert the ile ile.txt before the irst line.
:r!sed -n 2,8p file.txt Insert lines 2 to 8 from ile ile.txt below the cursor.
:r !ls Insert a directory listing below the cursor

gf
gx

:wq Save currently opened ile and exit Vim (even if ile is not changed).
:x Exit Vim but write only when changes have been made.
ZZ Equivalent to :x. Notice there’s no :. This is a key press.
:q! Exit Vim without saving currently opened ile.
:qa Exit all open iles in current Vim session


:w Save currently opened ile (which was previously saved).
:w file.txt Save currently opened ile as file.txt.
:w! file.txt Save ile as file.txt with overwrite option.
:sav file.txt Save current buffer as a new ile file.txt.
:up[date] file.txt Like :w but only save when the buffer has been motips


ctrl+o+o          -     open file edited
:argdo update     -     save all buffers
:bufdo
:windo


range
% all lines

:[range]{mode} [cmd=motion ...]
:%norm[al] A;          -     add ';' vao end all lines
:%norm di'             -     delete content in ''
:28put=range(5,55)     -     list numbers into lines after line28

:for i in range(1,20) | put='192.168.1'.i | endfor

left         -     right
previous     -     next
up           -     down
top          -     bottom
backward     -     forward
first        -     last

--------------------------------------------------------------------------------
                            motion

cursor movement [count=int][operator]
h     -     move cursor left
j     -     move cursor down
k     -     move cursor up
l     -     move cursor right

h     -     move to top of screen
m     -     move to middle of screen
l     -     move to bottom of screen

b   prev start word 
w   next start word

ge  prev end word
e   next end word

*    select all word giong nhau 
*    next hightlight text

sentences : la 1 cau stop boi dot<.>

{ jump to prev line empty giua cac paragraph=1 doan=nhieu sentencess
} jump to next line empty giua cac paragraph=1 doan=nhieu sentences 

( jump to prev sentences
) jump to next sentences

% jump to () or {}, [], ...
[[ jump to prev func or class


"jump to line   [count=int]gg
gg - go to the first line of the document
g - go to the last line of the document
50g: nhảy tới dòng 50 của file
5gg or 5g - go to line 5
ctrl + g: xem thông tin dòng hiện tại

0 - jump to the start of the line
$ - jump to the end of the line
^ - jump to the first non-blank character of the line
g_ - jump to the last non-blank character of the line
     bay nhay di nao         

; - repeat previous f, t, f or t movement
, - repeat previous f, t, f or t movement, backwards


#screen #croll
move screen
zz - center cursor on screen
ctrl + y - move screen up one line (without moving cursor)
ctrl + e - move screen down one line (without moving cursor)

ctrl + u - move back 1/2 a screen
ctrl + d - move forward 1/2 a screen

ctrl + b - move back one full screen
ctrl + f - move forward one full screen

gm      jumpto center screen
gM      jumpto center line


--------------------------------------------------------------------------------

                            normal mode:

                            DELETE=CUT
p: paste
dd: xoa 1 dong
d3d: xoa 3 dong
3d3d: del 9 line
ddp: swap current line with below line= cut current line paste below cursor
d3w: cut 3 word(tinh tu vi tri cursor)
dfp: xoa den khi gap 'p' xoa lun 'p' thi stop on line
dtp: xoa den khi gap 'p' thi stop NO cut 'p'
d/haha: xoa den khi gap 'haha' thi stop all lines
ggdG: gg=nhau ve dau file - dG xoa den cuoi file

x: cut 1 letter
c3w new_string<esc>: override 3 tu= new_string

yy      -     copy 1 line
dd      -     cut 1 line
cc      -     delete all words current line into insert mode

dj      -     cut 2 line, current line and down line
dk      -     cut 2 line, curernt line and up line
y c     -     tuong tu


tips
<esc>==jj
[int]i{letter}jj

8i<cr>jj    add 8 line
20i-jj      add 20 '-'

--------------------------------------------------------------------------------
                                    easymotion

/[words]        searching full file 
;f              search 1 letter full file
s               search 2 letter full file
t               search 2 letter down cursor jumpto space truoc 2letter



;L              jump to mark line
;w              jump to 2 letter mark words

;h              jump to word left curosr tren 1 line
;l              jump to word right cursor tren 1 line 
;j              jump to word down curosr tren nhieu lines
;k              jump to word up cursor tren nhieu lines



--------------------------------------------------------------------------------

{d,c,y}{i,a,t,f}
{dc,y}{t,f}{letter}
t gap letter thi stop
f lay lun letter roi stop

del=cut=d change=c visual=v deu giong nhau
ytp     copy letters to khi gap 'p'
yt,     copy letters to khi gap ',' roi into insert mode
yt;     copy letters to khi gap ';' thi stop

copy    del=d  change=c  visual=v cung vay 
yis     copy 1 cau=sentence
yas     copy 1 cau=sentence them spaces step sentence 2
yip     copy 1 paragraph=sentences
yap     copy 1 paragraph=sentences them \n=xuong dong


giong use voi searching
d/{words}   del letters den khi gap 'words'
c/{words}   del letters den khi gap 'words' roi into insert mode
y/{words}   copy letters den khi gap 'words' thi stop
-------------------------------------------------------------------------------
                                
                                targets.vim
operator d cut text nhung van o normal mode
operator c delete text nhung into insetmode add them text

{operator}{i|I|a|A}{text-objects}

{operator}{i|I|a|A}[l|n]{text-object}
them [l|n] dung cho text-object left=prev=above next=right=below

pair text objects:
    () {} [] <> '' "" ``
    ( content haha thong dung )

quote text objects:
    '' "" ``

separator text object:
   , . ; : + - = ~ _ * # / | \ & $ 


operator:
    v = visual mode = selete text
    d = thuoc normal mode = cut text van o current mode
    c = thuoc normal mode = delete text into insert text de add text=change

{i|I|a|a}:
    i = all content bao gom space dau cuoi trong pair
    I = all context KO co space
    a = lay luon ca pair cursor ngay pair đóng)]}
    A = lay luon ca pair cursor sau pair dong)]}cursor

cursor into content moi dung i) 2i) or 3i) .... co count=int


{v|d|c}{i|I|a|A}{text-object}
I lay content

I( I) I{ I} IB I[ I] I< > It 
a ( b (    abccontent     )      wordhaha ) e 
      ||   |        |    ||     |
      ||   ----I)----    ||     |
      ||                 ||     |
      ||-------i)--------||     |
      |                   |     |
      |--------a)---------|     |
      |                         |
      |--------A)---------------|

i lay content them spaces first va last
i( i) i{ i} iB i[ i] i< i> it

a ( b ( cccccccc ) d ) e
   │   └── i) ──┘   │
   └───── 2i) ──────┘


a lay lun pair
a( a) a{ a} aB a[ a] a< > at

a ( b ( cccccccc ) d ) e
  │   └─── a) ───┘   │
  └────── 2a) ───────┘

A lay lun pair nhung cursor o pair right space
A( A) A{ A} AB A[ A] A< > At

a ( b ( cccccccc ) d ) e
  │   └─── A) ────┘   │
  └────── 2A) ────────┘a


cursor inside in pair current -> next pair ke
next=right va pre=left
{v|d|c}{i|I|a|A}{l|n}{text-object}

in( an( In( An( il( al( Il( Al( ...


argument=a
{I i a A}{a}
Ia      lay context argument one
a , b ( contentx , d ) e
        └─ Ia ─┘

ia      lay context them spaces
a , b ( contentx , d ) e
       └── ia ──┘

aa      lay contentx to spaces content2
a , b ( contentx ,      content2 ) e
        └─── aa ──-----|

Aa      lay tu ( to spaces content2
a , b ( contentx ,      content2 ) e
      └─── Aa ────-----|

left=prev and right=next a=argument
ina ana Ina Ana ila ala Ila Ala

left next
any block
inb anb Inb Anb ilb alb Ilb Alb


left next
any quote ' "
inq anq Inq Anq ilq alq Ilq Alq


--------------------------------------------------------------------------------
                                    vim-surround 
delete, replace {} [] '' "" ``, ...
ds{pair}            cut pair
cs{old_p}{new_p}    change new_pair
ys{text-object}{pair}    add pair


"dung thong co de bo trau"
ds"     cut ""
cs"{    change " thanh {}


dung thong cursor inside 'dung'
ysi mapto g@i
yss mapto 1g@g_

dung thong
add pair vao 1 word
ysiw[   add pair [] thanh: [ dung ] thong

add pair vao start va and line
yssb    add pair () thanh: ( dung thong )
yss(    add pair () thanh: ( dung thong )


--------------------------------------------------------------------------------
                                       title case
gT is all title current line
gtw is title 1 word
gt3w is title w word

gti( is title in pair
gti' is title in ''
gta' is title in ''
...

gt( is prev words file
gt) is next words file


vim system

~       invert case current 1 letter
Vu      lowercase 1 line
VU      uppercase 1 line

gu{motion}
gu{w ( )}

gu{searching}{letter}
gu{t f}{letter}

gu<cr>  lowercase 2 line
gU<cr>  upeercase 2 line

g~<cr>   invert case letters 2 line
g~~      invert case letters to end 1 line

guw      make a word lowercase
gUw      make a word uppercase
>g       tab word



--------------------------------------------------------------------------------
                                    tabular.vim
align text=can chinh text
'<,'>   la select text = visual mode
r{int}   right
c(int)   center
l(int)   left

:'<,'>Tabularize /|     cang chinh theo |
:'<,'>Tabularize /=     cang chinh theo =
:'<,'>Tabularize /:/r0  cang chinh theo : right 0 space
:'<,'>Tabularize /:\zs  theo space ignoze :  content right, align left for content 


--------------------------------------------------------------------------------

#undo u
:ea[rlier] {int}{s m h d f}
f là buffer file
:ea 3d      undo 3day before

#redo <c-y> 
:lat[er] {int}{s m h d f}
:lat 3h     redo 3hour after

--------------------------------------------------------------------------------
                                    fold
folder la group cac <tab> khi ve 1 dong nhieu cho gon

zi  open/close all folds
zo open 1 fold
zc close 1 fold
--------------------------------------------------------------------------------
                        text object
{operator}{a|i}{text-object}

text-object
w   for word
s   for sentence
', ", `     for quotes
p   for paragraph
b (or (, )) for block surrounded by (),
B (or {, }) for block surrounded by {}
<, > for a block surrounded by <>
[, ] for a block surrounded by []
t for tag.


insert mode
ctrl + h - del prev word
ctrl + w - del prev letter
ctrl + j - begin new line during insert mode
ctrl + t - indent (move right) line one shiftwidth during insert mode
ctrl + d - de-indent (move left) line one shiftwidth during insert mode
ctrl + n - insert (auto-complete) next match left the cursor during insert mode
ctrl + p - insert (auto-complete) previous match left the cursor during insert mode
ctrl + rx - insert the contents of register x


editing
r{char} - replace a single character
j - join line below to the current one with one space in between
gj - join line below to the current one without space in between

gwip        format paragraph textwidth=79
gqip        format paragraph textwidth=79

cc     -     remove all words current line into insert mode
C      -     change (replace) to the end of the line
c$     -     change (replace) to the end of the line
xp     -     transpose two letters (delete and paste)
u      -     undo
U      -     restore (undo) last changed line
Ctrl + r - redo



cgn [text can thay the] exit
n   next to word
.   repeat


Visual commands
>> - shift text right
<< - shift text left
y - yank (copy) marked text
d - cut marked text
~ - switch case
u - change marked text to lowercase
U - change marked text to uppercase


--------------------------------------------------------------------------------
                                Registers

set names de luu lai cac command cut and copy de dung lai
"xyy save context cua command=yy toi name=x
"xp paste context cua name=x
"wdd save context cua command=dd toi name=w
"wp paste context cua name=w

:reg[isters] - show registers content
"xyy - yank into register x
"xp - paste contents of register x
"+y - yank into the system clipboard register
"+p - paste from the system clipboard register
     0 - last yank
     " - unnamed register, last delete or yank
     % - current file name
     # - alternate file name
     * - clipboard contents (X11 primary)
     + - clipboard contents (X11 clipboard)
     / - last search pattern
     : - last command-line
     . - last inserted text
     - - last small (less than a line) delete
     = - expression register
     _ - black hole register


Macros
luu nhieu acitons trong vim, dung dot. de repeat
nen dung omap: 0 $ w e b
tranh dung h j k l => vi khong biet do lai cua line 

qa - record macro a name
motion,d c y p  ... sau do q
q - stop=quit=save recording macro
@a - run macro a name
@@ - run lai macros

recursive
100@v           run 100 lines

norm[al]
:6,16norm @v    run macros name=v for line6 to line16
:10,$norm @v    run macros for line10 to end line of file
:%norm @v       run all lines
:'<'>norm @v    run for select context

--------------------------------------------------------------------------------
                                Marks and positions
set name= 1 vi tri nao do, de jump to

:marks - list of marks
m{a-zA-Z} - set current position for mark A
`a - jump to position co name=a

y`a - yank text to position of mark A
`0 - go to the position where Vim was previously exited
`" - go to the position when last editing this file
`. - go to the position of the last change in this file
`` - go to the position left the last jump
:ju[mps] - list of jumps
Ctrl + i - go to newer position in jump list
Ctrl + o - go to older position in jump list
:changes - list of changes
g, - go to newer position in change list
g; - go to older position in change list
Ctrl + ] - jump to the tag under cursor


--------------------------------------------------------------------------------
buffer

:ls<cr>     list buffers set(1 2 3 4 5 ...)
:bp<cr>     prev buffer
:bn<cr>     next buffer
:1b<cr>     select buffer 1
:2b<cr>     select buffer 2

--------------------------------------------------------------------------------

replace
%s      all lines
s       chi 1 line
gi      khong phan biet lower upper
gI      phan biet lower upper
gc      thong bao truoc khi action
gic     aciton cua 2 line tren

'<,'>   select content visual mode



:%s/old/new/g           Replace all occurences of old by new in file
:%s/onward/forward/gi	Replace onward by forward, case unsensitive=ko phan biet lower upper
:%s/old/new/gc          Replace all occurences with confirmation=thong bao
:%s/^/hello/g	        Replace the begining of each line by hello
:%s/$/Harry/g           Replace the end of each line by Harry
:.,$s/dung/thong/g      replace "dung" by thong from current line to end line of file
:.+4,$s/dung/thong/g
:.,+4/dung/thong/g
:36,42s/Unix/Linux/g    Replace Unix by Linux, line36 to  line42

\<str_old\>
\(bad|good\)
:s/\<is\>/was/g         replace chinh xac word=is = was
:s/\(bad|godd\)/haha/g  replace 'bad' or 'good' by 'haha'


g and d
^   start of line
$   end of line
\s* zero or more space characters

del lines containing "string"
:%s/ *$//g	            Delete all white spaces
:g/^$/d                 delete all lines empty
:g/string/d	            Delete all lines containing "string"
:g!/string/d	        Delete all lines containing which didn’t contain "string"
:v/string/d	            Delete all lines containing which didn’t contain "string"

:s/Bill/Steve/	        Replace the first occurence of Bill by Steve in current line
:s/Bill/Steve/g	        Replace Bill by Steve in current line
:%s/Bill/Steve/g	    Replace Bill by Steve in all the file
:%s/^M//g	            Delete DOS carriage returns (^M)
:%s/\r/\r/g	            Transform DOS carriage returns in returns
:%s#<[^>]\+>##g	        Delete HTML tags but keeps text
:%s/^\(.*\)\n\1$/\1/	Delete lines which appears twice

Ctrl+a	Increment number under the cursor
Ctrl+x	Decrement number under cursor
ggVGg?	Change text to Rot13


copy and paste
. dot is current line
:[int,int]t{motion . $ .....}

:copy = :t
:6copy. = :6t. => copy line 6 goto current line=.
:t6 => current line. paste below line 6
:t. => duplicate current line 
:t$ => copy current line, paste to end line


# move lines
:m[ove]
:{int,int}m{to line=int motion=0 $ }

:'<,'>m$ : move select contents to end lines
:!{cmd}
:5,7m21    move lines 5, 6 and 7 to after line 21
:5,7m0     move lines 5, 6 and 7 to left first line
:5,7m$     move lines 5, 6 and 7 to after last line
:.,.+4m21  move 5 lines starting at current line to after line 21
:,+4m14     same (. for current line is assumed)


# del lines
syntax :{,}d
:1,5d del line1 to line5
:3,$d del lline3 to end document
:$d     del last line document
:%d     del all document

Indent text
>> - indent (move right) line one shiftwidth
<< - de-indent (move left) line one shiftwidth
>% - indent a block with () or {} (cursor on brace)
>ib - indent inner block with ()
>at - indent a block with <> tags
3== - re-indent 3 lines
=% - re-indent a block with () or {} (cursor on brace)
=iB - re-indent inner block with {}


Exiting
:w - write (save) the file, but don't exit
:w !sudo tee % - write out the current file using sudo
:wq or :x or ZZ - write (save) and quit
:q - quit (fails if there are unsaved changes)
:q! or ZQ - quit and throw away unsaved changes
:wqa - write (save) and quit on all tabs
Search and replace
\vpattern - 'very magic' pattern: non-alphanumeric characters are interpreted as special regex symbols (no escaping needed)
n - repeat search in same direction
N - repeat search in opposite direction

:noh[lsearch] - remove highlighting of search matches

/{find_text} forward=right=next search
?{find_text} backward=left=previous search


================================================================================
#tmux #linux


session sẽ run lại nếu open tmux
dùng option <attach> đê restore session đó
do dung tmux oh-my-god, vai key da dc remap

<prefix> = <c-b> = <>
tmux-oh-my
tmux-plugins-manager phải fix lại
~\.tmux.conf.local

#plugin
#install
bind <s>

#tmux-plugin-manager
 # List of plugins
 set -g @tpm_plugins '
    \ tmux-plugins/tpm
    \ tmux-plugins/tmux-sensible
    \ tmux-plugins/tmux-resurrect
    \ tmux-plugins/tmux-continuum
    \ user-github/repository-name
  '
set -g @continuum-restore 'on

#copy #paste
#tmux-yank
quick: mouse drag select text + y  => copy text
copy mode: <prefix> [
v  vao visual mode selete text
y copy

#paste 
<prefix> p    => paste=put
<prefix> P    => show list copy


15p save 1 lan
nen save lan dau
bind <c-s>
bind <c-r>


# session > window > pane
#session 
bind=<prefix> = <c-b> = <c-a>
s     list sessions
w    list windows

f    searching sessions
<c-f>    searching windows

#rename
$     rename the current session
,     rename the current window

d     detach from the current session

c    create a new window
%     create a horizontal pane
"     create a vertical pane

&    close window

x    Xoá panel

0 to 9 select windows 0 through 9

#panes

q     show pane numbers
o     toggle between panes
}     swap with next pane
{     swap with previous pane
!     break the pane out of the window

#new
tmux
tmux new
tmux new -s [session_name]

# login 
tmux a
tmux at
tmux attach
tmux attach-session

# restore session_name
tmux a[ttach] -t {session_name}


#default=0
tmux attach -t 0

#del
tmux kill-session -t s_name


# session 1
<c-b> 1

#motion
<prefix> muoi ten     jumpto pane

<prefix>+n     change to the next window
<prefix>+p     change to the previous window

<prefix> (    jump to prev session
<prefix> )    jump to next session

================================================================================
#window 


panel
#split #horizontally
<c-b> "

#vertically
<c-b> %


Ctrl+b % or -  # chia đôi màn hình theo chiều dọc
Ctrl+b "  or _ # chia đôi màn hình theo chiều ngang

Ctrl+b q  # Hiện số thứ tự trên

================================================================================
#terminal

#motion 
ctrl-a begging line
ctrl-e end line
Alt+B: Go left (back) one word.
Alt+F: Go right (forward) one word.

Ctrl+B: Go left (back) one character.
Ctrl+F: Go right (forward) one character

ctrl-p prev cmd history
ctrl-n next cmd history
ctrl-r searching cmd history
ctrl-o == ctrl-g
ctrl-g exit searching history mode


#delete 
ctrl-w     cut word left cursor
alt-d    cut word right cursor
ctrl-d    del character right cursor
ctrl-y paste for alt-d

#case 
alt+u upper
alt+l lower
alt+c capitalize

#swap 
alt+t     swap word with prev word
ctrl+t
