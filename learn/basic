#map #noremap
<f2>     =     macros searching
<f5>     =     :UndotreeToggle
<f8>     =     :TagbarToggle


#noremap
noremap jj <esc>
noremap \ jj  "\ tuc jumpto to down 2 line, khong phai <esc>

noremap remap key = root key vim NOT recursive


:!cmd_bash_terminal

:e file.txt     -     open file in current buffer
:q              -     thoát khỏi vim
:q!             -     bắt buộc thoát không cần lưu ! = NOT save
:w              -     lưu file
:w!             -     bắt buộc ghi file (ghi đè)
:wq             -     lưu xong thoát

:[range]r[ead] {filename}
range = 0 dau file, $ cuoi file, int= int line
:r file.txt                -     Insert content file.txt below the cursor in current buffer.
:0r file.txt               -     Insert content file.txt above the first line.
:5r file.txt               -     insert content file above line5
:$r file                   -     insert content file after last line
:r!sed n 2,8p file.txt     -     Insert lines 2 to 8 of file.txt below the cursor.
:r !ls                     -     Insert a directory listing below the cursor

gf          =     open in the same window ("goto file")
<c-w>f      =     open in a new window (Ctrl-w f)
<c-w>gf     =     open in a new tab (Ctrl-w gf)
gx          =     open deffault webbrowser

:x                     -     Exit vim but write only when changes have been made.
:qa                    -     exit all open iles in current vim session


:sav file.txt          -     save current buffer as a new ile file.txt.
:up[date] file.txt     -     like :w but only save when the buffer has been motips

:jumps       -     jump list
:changes     -     change list

ctrl o o                    -     open file edited
:args file1 file2 file3     -     group file{1,2,3} into :args
:args **/*.js **/*.css      -     group js va css file
:argdo normal @a            -     run macros a for group buffer :args
:argdo write                -     saved all buffers
:wa[ll]                     -     = :argdo write
:argdo update               -     save all buffers
con :first :last :next :previous

** recursive directories
* current director

:bufdo
:windo


range
% all lines

:[range]{mode} [cmd=motion ...]
:%norm[al] A;          -     add ';' vao end all lines
:%norm di'             -     delete content in ''
:28put=range(5,55)     -     list numbers into lines after line28

:for i in range(1,20) | put='192.168.1'.i | endfor

:colorscheme <c-d>     #     list colorscheme


left         -     right
previous     -     next
up           -     down
top          -     bottom

backward     -     forward
front        -     behind

first        -     last
above        -     below
undo         -     redo
earlier      -     later


`      :     backtick
'      :     apostrophe
"      :     double quotes
()     :     parentheses
{}     :     braces
[]     :     square brackets
<>     :     angle brackets
!      :     exclamation
:      :     colon
;      :     semicolon
#      :     number sign - hash
%      :     percent
&      :     ampersand
•      :     asterisk - dau nhan
+      :     plus
-      :     minus = dau tru
,      :     comma
.      :     full stop = dot
=      :     equal sign
<      :     less than
>      :     greater than
?      :     question mark
@      :     at sign
/      :     slash
\      :     backslash
|      :     pipe
^      :     caret
_      :     underscore
~      :     tilde

--------------------------------------------------------------------------------

/\v"[^"]+"<cr>           -     select content in "" lay lun ""
/\v"\zs[^"]+\ze"<cr>     -     select content in ""

--------------------------------------------------------------------------------
#history #list #show
q?     -     open window list history searching prev word
q/     -     open window list history searching next word
q:     -     open window list history command: vim

--------------------------------------------------------------------------------
                           #motion #jumpto

cursor movement [count=int][operator]
h     -     move cursor left
j     -     move cursor down
k     -     move cursor up
l     -     move cursor right

h     -     move to top of screen
m     -     move to middle of screen
l     -     move to bottom of screen

b      -     prev start word
w      -     next start word

ge     -     prev end word
e      -     next end word

*      -     select all word giong nhau
*      -     next hightlight text

sentences : la 1 cau stop boi dot<.>

{      -     jump to prev line empty giua cac paragraph=1 doan=nhieu sentencess
}      -     jump to next line empty giua cac paragraph=1 doan=nhieu sentences

(      -     jump to prev sentences
)      -     jump to next sentences

%      -     jump to () or {}, [], ...
[[     -     jump to prev func or class


"jump to line   [count=int]gg
gg         -     go to the first line of the document
5gg        -     go to line 5
ctrl g     -     xem thông tin dòng hiện tại

0          -     jump to the start of the line
$          -     jump to the end of the line

#^ first-character last-character of line
^          -     jump to the first non_blank character of the line
g_         -     jump to the last non_blank character of the line

gm         -     jumpto center screen
gM         -     jumpto center line

F{letter}     -     jump to backward letter on line
f{letter}     -     jump to forward letter on line

T{letter}     -     jumpto char backward letter
t{letter}     -     jumpto char forward letter

,               -     repeat previous f, t, f or t
noremap / ;     -     repeat next f, t, f or t


#screen #croll
move screen
zz         -     center cursor on screen
ctrl y     -     move screen up one line (without moving cursor)
ctrl e     -     move screen down one line (without moving cursor)

ctrl u     -     move back 1/2 a screen
ctrl d     -     move forward 1/2 a screen

ctrl b     -     move back one full screen
ctrl f     -     move forward one full screen



--------------------------------------------------------------------------------

                            normal mode:

                            DELETE=CUT
P            -     paste front of cursor
p            -     paste behind of cursor
ctrl r "     -     paste tu y=command for ex mode
ctrl r 0     -     paste tu y=command for insert ode


[recursive=int]{y d c}[int]{motion}
y     -     copy
d     -     cut
c     -     cut and insert

motion:
k j h l
l w e b ge 0 $ ^ g_ ( ) p gg G
%            -     to ) } ]
dd cc yy     -     copy or cut quick full 1 line


x                       :     cut 1 letter
cl         -     cut 1 char, after into insert mode
s          -     == cl
dd         -     cut 1 dong
d3d        -     cut 3 dong
3d3d       -     cut 9 line
ddp        -     swap current line with below line= cut current line paste below cursor
d3w        -     cut 3 word(tinh tu vi tri cursor)
dfp        -     cut den khi gap 'p' cut lun 'p' thi stop on line
dtp        -     cut den khi gap 'p' thi stop NO cut 'p'
d18|       -     cut toi screen column 18
d/haha     -     cut den khi gap 'haha' thi stop all lines
ggdG       -     gg=nhau ve dau file, dG cut den cuoi file
J          -     #join down line with current line


yy          -     copy 1 line
dd          -     cut 1 line
cc          -     cut all words current line into insert mode
c enter     -     = cc

y^      -     copy to word start line non blank
yg_     -     copy to word end line non blank
y0      -     copy to start line
y$      -     copy to end line
y%      -     copy to end  ] } )

dj      -     cut 2 line, current line and down line
dk      -     cut 2 line, curernt line and up line
y c     -     tuong tu


d?{word}     -     cut to word left cursor
d/{word}     -     cut ot word right cursor
c y          -     cung vay

#tips
<esc>==jj
[int]i{letter}jj

8i<cr>jj     =     add 8 line
20i-jj       =     add 20 '-'
d18|         =     cut words to column 18
c y          =     giong voi cut=d

ctrl a     =     int+1
ctrl x     =     int-1
--------------------------------------------------------------------------------
                                    #easymotion

/[words]        searching full file 
;f              search 1 letter full file
s               search 2 letter full file
t               search 2 letter down cursor jumpto space truoc 2letter


;L              jump to mark line
;w              jump to 2 letter mark words

;h              jump to word left curosr tren 1 line
;l              jump to word right cursor tren 1 line 
;j              jump to word down curosr tren nhieu lines
;k              jump to word up cursor tren nhieu lines


--------------------------------------------------------------------------------
#sentence #paragraph

{d,c,y}{i,a,t,f}
{dc,y}{t,f}{letter}
t gap letter thi stop
f lay lun letter roi stop

del=cut=d change=c visual=v deu giong nhau
ytp     -     copy letters to khi gap 'p'
yt,     -     copy letters to khi gap ',' roi into insert mode
yt;     -     copy letters to khi gap ';' thi stop

copy    cut=d  change=c  visual=v cung vay 
yis     -     copy 1 cau=sentence
yas     -     copy 1 cau=sentence them spaces step sentence 2
yip     -     copy 1 paragraph=sentences
yap     -     copy 1 paragraph=sentences them \n=xuong dong


giong use voi searching
d/{words}   cut letters den khi gap 'words'
c/{words}   cut letters den khi gap 'words' roi into insert mode
y/{words}   copy letters den khi gap 'words' thi stop
-------------------------------------------------------------------------------
                                
                                targets.vim
operator d cut text nhung van o normal mode
operator c cut text nhung into insetmode add them text

{operator}{i|I|a|A}{text-objects}

{operator}{i|I|a|A}[l|n]{text-object}
them [l|n] dung cho text-object left=prev=above next=right=below

pair text objects:
    () {} [] <> '' "" ``
    ( content haha thong dung )

quote text objects:
    '' "" ``

separator text object:
   , . ; : + - = ~ _ * # / | \ & $ 


operator:
    v = visual mode = selete text
    d = thuoc normal mode = cut text van o current mode
    c = thuoc normal mode = cut text into insert text de add text=change

{i|I|a|a}:
    i = all content bao gom space dau cuoi trong pair
    I = all context KO co space
    a = lay luon ca pair cursor ngay pair đóng)]}
    A = lay luon ca pair cursor sau pair dong)]}cursor

cursor into content moi dung i) 2i) or 3i) .... co count=int


{v|d|c}{i|I|a|A}{text-object}
I lay content

I( I) I{ I} IB I[ I] I< > It 
a ( b (    abccontent     )      wordhaha ) e 
      ||   |        |    ||     |
      ||   ----I)----    ||     |
      ||                 ||     |
      ||-------i)--------||     |
      |                   |     |
      |--------a)---------|     |
      |                         |
      |--------A)---------------|

i lay content them spaces first va last
i( i) i{ i} iB i[ i] i< i> it

a ( b ( cccccccc ) d ) e
   │   └── i) ──┘   │
   └───── 2i) ──────┘


a lay lun pair
a( a) a{ a} aB a[ a] a< > at

a ( b ( cccccccc ) d ) e
  │   └─── a) ───┘   │
  └────── 2a) ───────┘

A lay lun pair nhung cursor o pair right space
A( A) A{ A} AB A[ A] A< > At

a ( b ( cccccccc ) d ) e
  │   └─── A) ────┘   │
  └────── 2A) ────────┘a


cursor inside in pair current -> next pair ke
next=right va pre=left
{v|d|c}{i|I|a|A}{l|n}{text-object}

in( an( In( An( il( al( Il( Al( ...


argument=a
{I i a A}{a}
Ia      lay context argument one
a , b ( contentx , d ) e
        └─ Ia ─┘

ia      lay context them spaces
a , b ( contentx , d ) e
       └── ia ──┘

aa      lay contentx to spaces content2
a , b ( contentx ,      content2 ) e
        └─── aa ──-----|

Aa      lay tu ( to spaces content2
a , b ( contentx ,      content2 ) e
      └─── Aa ────-----|

left=prev and right=next a=argument
ina ana Ina Ana ila ala Ila Ala

left next
any block
inb anb Inb Anb ilb alb Ilb Alb


left next
any quote ' "
inq anq Inq Anq ilq alq Ilq Alq


--------------------------------------------------------------------------------
                                    vim-surround 
cut, replace {} [] '' "" ``, ...
ds{pair}            cut pair
cs{old_p}{new_p}    change new_pair
ys{text-object}{pair}    add pair


"dung thong co de bo trau"
ds"     cut ""
cs"{    change " thanh {}


dung thong cursor inside 'dung'
ysi mapto g@i
yss mapto 1g@g_

dung thong
add pair vao 1 word
ysiw[   add pair [] thanh: [ dung ] thong

into visual mode
veee     -     select 3 word
S"       -     add "" for 3 word

add pair vao start va and line
yssb    add pair () thanh: ( dung thong )
yss(    add pair () thanh: ( dung thong )


--------------------------------------------------------------------------------
                                       title case
<leader>cmd

gT       -     is all title current line
gtw      -     is title 1 word
gt3w     -     is title 3 word

gti(     -     is title in pair
gti'     -     is title in ''
gta'     -     is title in ''
...

gt(     -     is prev words file
gt)     -     is next words file


vim system

~       invert case current 1 letter
Vu      lowercase 1 line
VU      uppercase 1 line

gu{motion}
g{u U}[i a]{w s p ( ' " < t ...}

gu{searching}{letter}
gu{t f}{letter}

gu<cr>  lowercase 2 line
gU<cr>  upeercase 2 line

g~<cr>   invert case letters 2 line
g~~      invert case letters to end 1 line

guw      make a word lowercase
gUw      make a word uppercase
>g       tab word



--------------------------------------------------------------------------------
                                    tabular.vim
align text=can chinh text
'<,'>   la select text = visual mode
r{int}   right
c(int)   center
l(int)   left

:'<,'>Tabularize /|        -     cang chinh theo |
:'<,'>Tabularize /=        -     cang chinh theo =
:'<,'>Tabularize /:/r0     -     cang chinh theo : right 0 space
:'<,'>Tabularize /:\zs     -     theo space ignoze :  content right, align left for content


--------------------------------------------------------------------------------

#undo u
:ea[rlier] {int}{s m h d f}
f là buffer file
:ea 3d      undo 3day before

#redo <c-y> 
:lat[er] {int}{s m h d f}
:lat 3h     redo 3hour after

--------------------------------------------------------------------------------
                                    fold
folder la group cac <tab> khi ve 1 dong nhieu cho gon

zi     -     open/close all folds
zo     -     open 1 fold
zc     -     close 1 fold
--------------------------------------------------------------------------------
                        text object
{operator}{a|i}{text-object}

text-object
w   for word
s   for sentence
', ", `     for quotes
p   for paragraph
b (or (, )) for block surrounded by (),
B (or {, }) for block surrounded by {}
<, > for a block surrounded by <>
[, ] for a block surrounded by []
t for tag.


#insert mode
ctrl h      -     del prev letter
ctrl w      -     del prev word
ctrl j      -     begin new line during insert mode
ctrl t      -     indent (move right) line one shiftwidth during insert mode
ctrl d      -     de indent (move left) line one shiftwidth during insert mode
ctrl n      -     insert (auto complete) next match left the cursor during insert mode
ctrl p      -     insert (auto complete) previous match left the cursor during insert mode
ctrl rx     -     insert the contents of register x

gwip     -     format paragraph textwidth=79
gqip     -     format paragraph textwidth=79

cc         -     cut all words current line after switch into insert mode
C          -     cut (replace) to the end of the line
c$         -     change (replace) to the end of the line
xp         -     transpose two letters (delete and paste)
u          -     undo
U          -     restore (undo) last changed line
Ctrl r     -     redo



cgn [text can thay the] exit
n   next to word
.   repeat

--------------------------------------------------------------------------------
#visual commands

ctrl v     -     visual block mode
V          -     select 1 line
gv-
o-

>.         -     two tab indent text
>>         -     shift text right
<<         -     shift text left
y          -     yank (copy) marked text
d          -     cut marked text
~          -     switch case
u          -     change marked text to lowercase
U          -     change marked text to uppercase


--------------------------------------------------------------------------------
                                #register

set names de luu lai cac command cut and copy de dung lai
"xyy     -     save context cua command=yy toi name=x
"xp      -     paste context cua name=x
"wdd     -     save context cua command=dd toi name=w
"wp      -     paste context cua name=w

:reg[isters]     -     show registers content
"xyy             -     yank into register x
"xp              -     paste contents of register x
"+y              -     yank into the system clipboard register
"+p              -     paste from the system clipboard register

"0p       -     uu tien paste tu y=command ignoze c d
qAgUq     -     append gU vao register name=a dung upper A

     0 - last yank
     " - unnamed register, last delete or yank
     % - current file name
     # - alternate file name
     * - clipboard contents (X11 primary)
     + - clipboard contents (X11 clipboard)
     / - last search pattern
     : - ex command-line
     . - last inserted text
     - - last small (less than a line) delete
     = - expression register
     _ - black hole register


#macros
luu nhieu acitons trong vim, dung dot. de repeat
nen dung omap: 0 $ w e b
tranh dung h j k l -> vi khong biet do lai cua line 
^]     =    press <esc>

qa                               -     record macro a name
motion,d c y p  ... sau do q
q                                -     stop=quit=save recording macro
@a                               -     run macro a name
@@                               -     run lai macros

recursive
100@v           run 100 lines

:[range]norm[al] [cmd=@v, motion, ...]
:6,16norm @v     -     run macros name=v for line6 to line16
:10,$norm @v     -     run macros for line10 to end line of file
:%norm @v        -     run all lines
:'<'>norm @v     -     run for select context

--------------------------------------------------------------------------------
                                #marks and positions
set name= 1 vi tri nao do, de jump to

:marks        |     list of marks
m{a-zA-Z}     |     set current position for mark A
`a            |     jump to position co name=a


:delmarks a        |     delete mark a
:delmarks a-d      |     delete marks a, b, c, d
:delmarks abxy     |     delete marks a, b, x, y
:delmarks aA       |     delete marks a, A
:delmarks!         |     delete all lowercase marks for the current buffer (a-z)


y`a          -     yank text to position of mark A
`0           -     go to the position where Vim was previously exited
`"           -     go to the position when last editing this file
`.           -     go to the position of the last change in this file
``           -     go to the position left the last jump
:ju[mps]     -     list of jumps
Ctrl i       -     go to newer position in jump list
Ctrl o       -     go to older position in jump list
:changes     -     list of changes
g,           -     go to newer position in change list
g;           -     go to older position in change list
Ctrl  ]      -     jump to the tag under cursor

--------------------------------------------------------------------------------
                                    vim-signature
marks: place, toggle and display

mx           Toggle mark 'x' and display it in the leftmost column

dmx          Remove mark 'x' where x is a-zA-Z
m-           Delete all marks from the current line
m<Space>     Delete all marks from the current buffer
m<BS>        Remove all markers
m<S-[0-9]>   Remove all markers of the same type

m,           Place the next available mark
m.           If no mark on line, place the next available mark. Otherwise, remove (first) existing mark.
]`           Jump to next mark
[`           Jump to prev mark
]'           Jump to start of next line containing a mark
['           Jump to start of prev line containing a mark
`]           Jump by alphabetical order to next mark
`[           Jump by alphabetical order to prev mark
']           Jump by alphabetical order to start of next line having a mark
'[           Jump by alphabetical order to start of prev line having a mark
m/           Open location list and display marks from current buffer

m[0-9]       Toggle the corresponding marker !@#$%^&*()
]-           Jump to next line having a marker of the same type
[-           Jump to prev line having a marker of the same type
]=           Jump to next line having a marker of any type
[=           Jump to prev line having a marker of any type
m?           Open location list and display markers from current buffer

--------------------------------------------------------------------------------
#buffer

:n {bufname}     -     new buffer with bufname
:b {bufname}     -     switch to bufname
:[range]bd       -     Close current buffer
:bd {b1 b2 b2}   -     Close b1 b2 b3 

:ls<cr>     list buffers set(1 2 3 4 5 ...)
:bp<cr>     prev buffer
:bn<cr>     next buffer
:1b<cr>     select buffer 1
:2b<cr>     select buffer 2

:b#                       -     Last buffer visited, actual # sign
:b1                       -     Switch to buffer #1
:1b                       -     switch to buffer 1
:bm                       -     Switch to next modified buffer


:sb 1             -     Open buffer #1 in a split
:sb {bufname}     -     Open buffer bufname in a split
:sbn              -     Open next buffer in a split
:sbp              -     Open previous buffer in a split
:sba              -     Open all buffers in split windows

--------------------------------------------------------------------------------

#substitute #replace
%s      all lines
s       chi 1 line
gi      khong phan biet lower upper
gI      phan biet lower upper
gc      thong bao truoc khi action
gic     aciton cua 2 line tren

'<,'>     -     select content visual mode
&         -     repeat replace
* .       -     zero or more characters

:s/du.g/thong == :s/du*g/thong

\={vimcode}
:%s//\=@a/g       |     insert content with run macros a
:%s//<c-r>0/g     |     insert content with register 0

:%s/old/new/g           Replace all occurences of old by new in file
:%s/onward/forward/gi	Replace onward by forward, case unsensitive=ko phan biet lower upper
:%s/old/new/gc          Replace all occurences with confirmation=thong bao
:%s/^/hello/g	        Replace the begining of each line by hello
:%s/$/Harry/g           Replace the end of each line by Harry
:.,$s/dung/thong/g      replace "dung" by thong from current line to end line of file
:.+4,$s/dung/thong/g
:.,+4/dung/thong/g
:36,42s/Unix/Linux/g    Replace Unix by Linux, line36 to  line42

\<str_old\>
\(bad|good\)
:s/\<is\>/was/g         replace chinh xac word=is = was
:s/\(bad|godd\)/haha/g  replace 'bad' or 'good' by 'haha'


g and d
^   start of line
$   end of line
\s* zero or more space characters

del lines containing "string"
:%s/ *$//g	            Delete all white spaces
:g/^$/d                 delete all lines empty
:g/string/d	            Delete all lines containing "string"
:g!/string/d	        Delete all lines containing which didn’t contain "string"
:v/string/d	            Delete all lines containing which didn’t contain "string"

:s/Bill/Steve/	        Replace the first occurence of Bill by Steve in current line
:s/Bill/Steve/g	        Replace Bill by Steve in current line
:%s/Bill/Steve/g	    Replace Bill by Steve in all the file
:%s/^M//g	            Delete DOS carriage returns (^M)
:%s/\r/\r/g	            Transform DOS carriage returns in returns
:%s#<[^>]\+>##g	        Delete HTML tags but keeps text
:%s/^\(.*\)\n\1$/\1/	Delete lines which appears twice

Ctrl a     -     Increment number under the cursor
Ctrl x     -     Decrement number under cursor
ggVGg?     -     Change text to Rot13


#copy #paste
. dot is current line
:[int,int]t{motion . $ .....}

:copy = :t
:6t.     -     copy line 6 goto current line=.
:t6      -     current line. paste below line 6
:t.      -     duplicate current line
:t$      -     copy current line, paste to end line of document


#move lines
:m[ove]
:{int,int}m{to line=int motion=0 $ }

:'<,'>m$      -     move select contents to end lines
:!{cmd}
:5,7m21       -     move lines 5, 6 and 7 to after line 21
:5,7m0        -     move lines 5, 6 and 7 to left first line
:5,7m$        -     move lines 5, 6 and 7 to after last line
:.,.+4m21     -     move 5 lines starting at current line to after line 21
:,+4m14       -     same (. for current line is assumed)


#cut lines
syntax :{,}d
:1,5d     -     cut line1 to line5
:3,$d     -     cut lline3 to end document
:$d       -     cut last line document
:%d       -     cut all document


#indent text
[repeat]>{> % motion=gg G}
[repeat]>{> % motion=gg G}
>>      -     indent (move right) line one shiftwidth
<<      -     de indent (move left) line one shiftwidth
>%      -     indent a block with () or {} (cursor on brace)
>ib     -     indent inner block with ()
>at     -     indent a block with <> tags


indent undo
[repeat]={= %}
3==     -     re indent 3 lines
=%      -     re indent a block with () or {} (cursor on brace)
=iB     -     re indent inner block with {}

================================================================================
#tmux #linux


session sẽ run lại nếu open tmux
dùng option <attach> đê restore session đó
do dung tmux oh-my-god, vai key da dc remap

bind = <prefix> = <c-b> = <c-a>
tmux-oh-my
tmux-plugins-manager phải fix lại
~\.tmux.conf.local

#plugin
#install
bind I         -     install plugin
bind U         -     update plugin
bind alt u     -     remove plugin

#tmux-plugin-manager
 # List of plugins
 set -g @tpm_plugins '
    \ tmux-plugins/tpm
    \ tmux-plugins/tmux-sensible
    \ tmux-plugins/tmux-resurrect
    \ tmux-plugins/tmux-continuum
    \ user-github/repository-name
  '
set -g @continuum-restore 'on

#copy #paste
#tmux-yank
quick: mouse drag select text + y  => copy text
copy mode: <prefix> [
v  vao visual mode selete text
y copy

bind <cr>     -     into copy mode
bind e        -     open ~/.tmux.config.local
bind r        -     reload config
ctrl+l        -     clear

#paste 
bind b         -     list paste buffer
<prefix> p     -     paste=put
<prefix> P     -     show list copy

15p save 1 lan
nen save lan dau
bind <c-s>
bind <c-r>


# session > window > pane
#session 
bind=<prefix> = <c-b> = <c-a>
s     -     list sessions
w     -     list windows

f         =     searching sessions
<c-f>     =     searching windows

#rename
$     rename the current session
,     rename the current window

d     detach from the current session

bind c     =     create a new window
bind -     =     create a horizontal pane
bind _     =     create a vertical pane

bind &     -     close window
bind x     -     Xoá panel

0 to 9 select windows 0 through 9
bind ctrl+h     -     prev window
bind ctrl+l     -     next window
bind tab        -     last window

bind <     -     swap panes
bind >     -     swap panes

bind muoi ten-jumpto pane

bind (     -     jump to prev session
bind )     -     jump to next session

#panes

q     show pane numbers
o     toggle between panes
}     swap with next pane
{     swap with previous pane
!     break the pane out of the window

#new
tmux
tmux new
tmux new -s [session_name]

# login 
tmux a
tmux at
tmux attach
tmux attach-session

# restore session_name
tmux a[ttach] -t {session_name}


#default=0
tmux attach -t 0

#del
tmux kill-session -t s_name


#copycat
bind /     =     searching
        string
        [0-9]+

bind ctrl f     =     simple file search
bind ctrl g     =     jumping over git status files (best used after git status command)
bind alt h      =     jumping over SHA-1/SHA-256 hashes (best used after git log command)
bind ctrl u     =     url search (http, ftp and git urls)
bind ctrl d     =     number search (mnemonic d, as digit)
bind alt i      =     ip address search

n     =     jumpto next match
N     =     jumpto prev match


copy mode = bind <cr>
o           =     "open" a highlighted selection
Ctrl o      =     open a highlighted selection with the $EDITOR
Shift s     =     search the highlighted selection directly inside a search engine (defaults to google).

================================================================================
#window 


panel
#split #horizontally
<c-b> "

#vertically
<c-b> %
================================================================================
#terminal

#motion 
ctrl a      -     begging line
ctrl e      -     end line
ctrl b      -     Go left (back) one character.
ctrl f      -     Go right (forward) one character
alt b       -     Go left (back) one word.
alt f       -     Go right (forward) one word.

ctrl p      -     prev cmd history
ctrl n      -     next cmd history
ctrl r      -     searching cmd history
ctrl g      -     exit searching history mode
ctrl o      -     ctrl g


#delete
ctrl w      -     cut word left cursor
alt d       -     cut word right lay lun letter tai current cursor
ctrl u      -     cut 1 line
ctrl k      -     cut current cursor to end line
ctrl y      -     paste

ctrl d      -     del character right cursor


#case
alt u       -     upper
alt l       -     lower
alt c       -     capitalize

#swap
alt t       -     swap word with prev word
ctrl t      -     swap letter with prev letter
