important
    {operator}{count}{motion}
    {count}{operator}{motion}

    number = int
    operator=command -> i,a,r,c,d,y -> them xoa sua, ....
    motion -> phim hjkl, w,e,b ,, ^ 0 $ g_
    text object:     
vim command -> sau
:! cmd_bash


:q: thoát khỏi vim
:q!: bắt buộc thoát không cần lưu
:w: lưu file
:w!: bắt buộc ghi file (ghi đè)
:wq: lưu xong thoát


cursor movement [count=int][operator]
h - move cursor left
j - move cursor down
k - move cursor up
l - move cursor right

h - move to top of screen
m - move to middle of screen
l - move to bottom of screen

w - jump forwards to the start of a word
w - jump forwards to the start of a word (words can contain punctuation)
e - jump forwards to the end of a word
e - jump forwards to the end of a word (words can contain punctuation)
b - jump backwards to the start of a word
b - jump backwards to the start of a word (words can contain punctuation)
% - move to matching character (default supported pairs: '()', '{}', '[]' - use :h matchpairs in vim for more info)

% jump to () or {}
]] jump to next func or class
[[ jump to prev func or class

} jump to next line trong
{ jump to prev line trong


"jump to line   [count=int]gg
gg - go to the first line of the document
g - go to the last line of the document
50g: nhảy tới dòng 50 của file
5gg or 5g - go to line 5
ctrl + g: xem thông tin dòng hiện tại

0 - jump to the start of the line
$ - jump to the end of the line
^ - jump to the first non-blank character of the line
g_ - jump to the last non-blank character of the line
     bay nhay di nao         

tx - jump to left next occurrence of character x
fx - jump to next occurrence of character x
fx - jump to previous occurence of character x
tx - jump to after previous occurence of character x
; - repeat previous f, t, f or t movement
, - repeat previous f, t, f or t movement, backwards
} - jump to next paragraph (or function/block, when editing code)
{ - jump to previous paragraph (or function/block, when editing code)
zz - center cursor on screen

ctrl + e - move screen down one line (without moving cursor)
ctrl + y - move screen up one line (without moving cursor)
ctrl + b - move back one full screen
ctrl + f - move forward one full screen
ctrl + d - move forward 1/2 a screen
ctrl + u - move back 1/2 a screen



let mapleader = "\"
:map <leader>a  haha <esc>
: map \a haha <esc>


                            normal mode:
key stroke:
<c-w>o = press ctrl+w break roi press o

                            DELETE
dd: xoa 1 dong
d3d: xoa 3 dong
d3w: delete 3 word(tinh tu vi tri cursor)
dfp: xoa den khi gap 'p' xoa lun 'p' thi stop on line
dtp: xoa den khi gap 'p' thi stop NO delete 'p'
d/haha: xoa den khi gap 'haha' thi stop all lines
ggdG: gg=nhau ve dau file - dG xoa den cuoi file

x: cut 1 letter
c3w new_string<esc>: override 3 tu= new_string
yy: copy 1 line
g~: swap case
guw: make a word lowercase
gUw: make a word uppercase
>g: tab word
a;<esc> : cuoi line($a) them ; press<esc>
5@a: titlecase

-------------------------------------------------------------------------------
                                
                                targets.vim
operator d delete text nhung van o normal mode
operator c delete text nhung into insetmode add them text

{operator}{i|I|a|A}{text-objects}

{operator}{i|I|a|A}[l|n]{text-object}
them [l|n] dung cho text-object left=prev next=right

pair text objects:
    () {} [] <> '' "" ``
    ( content haha thong dung )

quote text objects:
    '' "" ``

separator text object:
   , . ; : + - = ~ _ * # / | \ & $ 


operator:
    v = visual mode = selete text
    d = thuoc normal mode = delete text van o current mode
    c = thuoc normal mode = delete text into insert text de add text=change

{i|I|a|a}:
    i = all content bao gom space dau cuoi trong pair
    I = all context KO co space
    a = lay luon ca pair cursor ngay pair đóng)]}
    A = lay luon ca pair cursor sau pair dong)]}cursor

cursor into content moi dung i) 2i) or 3i) .... co count=int


{v|d|c}{i|I|a|A}{text-object}


i( i) i{ i} iB i[ i] i< i> it

a ( b ( cccccccc ) d ) e
   │   └── i) ──┘   │
   └───── 2i) ──────┘


a( a) a{ a} aB a[ a] a< > at

a ( b ( cccccccc ) d ) e
  │   └─── a) ───┘   │
  └────── 2a) ───────┘


I( I) I{ I} IB I[ I] I< > It

a ( b ( cccccccc ) d ) e
    │   └─ I) ─┘   │
    └──── 2I) ─────┘


A( A) A{ A} AB A[ A] A< > At

a ( b ( cccccccc ) d ) e
  │   └─── A) ────┘   │
  └────── 2A) ────────┘a


next=right va pre=left
{v|d|c}{i|I|a|A}{l|n}{text-object}

in( an( In( An( il( al( Il( Al( ...


Ia      lay context argument one
a , b ( cccccccc , d ) e
        └─ Ia ─┘

ia      lay context them 2 space
a , b ( cccccccc , d ) e
       └── ia ──┘

aa
a , b ( cccccccc , d ) e
        └─── aa ──┘

Aa
a , b ( cccccccc , d ) e
      └─── Aa ────┘

left=prev and right=next a=argument
ina ana Ina Ana ila ala Ila Ala


any block
inb anb Inb Anb ilb alb Ilb Alb


any quote
inq anq Inq Anq ilq alq Ilq Alq


--------------------------------------------------------------------------------
                                    vim-surround 
delete, replace {} [] '' "" ``, ...
ds{pair}            delete pair
cs{old_p}{new_p}    change new_pair
ys{text-object}{pair}    add pair


"dung thong co de bo trau"
ds"     delete ""
cs"{    change " thanh {}


dung thong cursor ngay 'dung'
ysi mapto g@i
yss mapto 1g@g_

dung thong

ysiw[   add pair [] thanh: [ dung ] thong
yssb    add pair () thanh: ( dung thong )
yss(    add pair () thanh: ( dung thong )



--------------------------------------------------------------------------------
                        text object
{operator}{a|i}{text-object}

text-object
w   for word
s   for sentence
', ", `     for quotes
p   for paragraph
b (or (, )) for block surrounded by (),
B (or {, }) for block surrounded by {}
<, > for a block surrounded by <>
[, ] for a block surrounded by []
t for tag.

daw - xoa 1 tu gap space stop
ciw to change inner word
das to delete a sentence (dis to delete inner sentence)
da" to delete something in double quotes including the quotes themselves (di" deletes only the content inside the quotes and spares the quotes)
ci" to change something inside double quotes
dap to delete a paragraph
dab da( or da) to delete a block surrounded by (
daB da{ or da} to delete a block surrounded by {
dat to delete an HTML tag
cit to change the contents of an HTML tag

ci" jump to "" into insert-mode change text
cib jumpt to () into insert-mode change text
ciB jump to {} into insert-mdoe change text

ca" delete tat ca ,lun ca "" gap dau tien, sau on into insert-mode

insert mode - inserting/appending text
i - insert left the cursor
i - insert at the beginning of the line
a - insert (append) after the cursor
a - insert (append) at the end of the line
o - append (open) a new line below the current line
o - append (open) a new line above the current line
ea - insert (append) at the end of the word
ctrl + h - delete the character left the cursor during insert mode
ctrl + w - delete word left the cursor during insert mode
ctrl + j - begin new line during insert mode
ctrl + t - indent (move right) line one shiftwidth during insert mode
ctrl + d - de-indent (move left) line one shiftwidth during insert mode
ctrl + n - insert (auto-complete) next match left the cursor during insert mode
ctrl + p - insert (auto-complete) previous match left the cursor during insert mode
ctrl + rx - insert the contents of register x


editing
r{char} - replace a single character
j - join line below to the current one with one space in between
gj - join line below to the current one without space in between
gwip - reflow paragraph
g~ - switch case up to motion
gu{motion} - change to lowercase up to motion
gU{motion} - change to uppercase up to motion
cc - change (replace) entire line
C - change (replace) to the end of the line
c$ - change (replace) to the end of the line
ciw - change (replace) entire word
cw - change (replace) to the end of the word
s - delete character and substitute text
S - delete line and substitute text (same as cc)
xp - transpose two letters (delete and paste)
u - undo
U - restore (undo) last changed line
Ctrl + r - redo
. - repeat last command


SEARCH TEXT AND REPLACE occurrence 
search text sau do move cursor den position can thay the
press cgn [text can thay the] exit
repeat = .


Marking text (visual mode)
v - start visual mode, mark lines, then do a command (like y-yank)
V - start linewise visual mode
o - move to other end of marked area
Ctrl + v - start visual block mode
O - move to other corner of block
aw - mark a word
ab - a block with ()
aB - a block with {}
at - a block with <> tags
ib - inner block with ()
iB - inner block with {}
it - inner block with <> tags
Esc - exit visual mode


Visual commands
>> - shift text right
<< - shift text left
y - yank (copy) marked text
d - delete marked text
~ - switch case
u - change marked text to lowercase
U - change marked text to uppercase


Registers
:reg[isters] - show registers content
"xy - yank into register x
"xp - paste contents of register x
"+y - yank into the system clipboard register
"+p - paste from the system clipboard kegister
     0 - last yank
     " - unnamed register, last delete or yank
     % - current file name
     # - alternate file name
     * - clipboard contents (X11 primary)
     + - clipboard contents (X11 clipboard)
     / - last search pattern
     : - last command-line
     . - last inserted text
     - - last small (less than a line) delete
     = - expression register
     _ - black hole register


Marks and positions
:marks - list of marks
ma - set current position for mark A
`a - jump to position of mark A
y`a - yank text to position of mark A
`0 - go to the position where Vim was previously exited
`" - go to the position when last editing this file
`. - go to the position of the last change in this file
`` - go to the position left the last jump
:ju[mps] - list of jumps
Ctrl + i - go to newer position in jump list
Ctrl + o - go to older position in jump list
:changes - list of changes
g, - go to newer position in change list
g; - go to older position in change list
Ctrl + ] - jump to the tag under cursor


Macros
qa - record macro a
q - stop recording macro
@a - run macro a
@@ - rerun last run macro


Cut and paste   
yy - yank (copy) a line
2yy - yank (copy) 2 lines
yw - yank (copy) the characters of the word from the cursor position to the start of the next word
y$ - yank (copy) to end of line
p - put (paste) the clipboard after cursor
P - put (paste) left cursor
dd - delete (cut) a line
2dd - delete (cut) 2 lines
dw - delete (cut) the characters of the word from the cursor position to the start of the next word
D - delete (cut) to the end of the line
d$ - delete (cut) to the end of the line
x - delete (cut) character


:copy = :t
:6copy.=:6t. => copy line 6 goto current line=.
:t6 => current line. paste below line 6
:t. => duplicate copy and paste vi tri hien tai
:t$ => paste to end line

# move lines
:m[ove]
:'<,'>m$ : move select contents to end lines
:!{cmd}
:5,7m 21    move lines 5, 6 and 7 to after line 21
:5,7m 0     move lines 5, 6 and 7 to left first line
:5,7m $     move lines 5, 6 and 7 to after last line
:.,.+4m 21  move 5 lines starting at current line to after line 21
:,+4m14     same (. for current line is assumed)


Indent text
>> - indent (move right) line one shiftwidth
<< - de-indent (move left) line one shiftwidth
>% - indent a block with () or {} (cursor on brace)
>ib - indent inner block with ()
>at - indent a block with <> tags
3== - re-indent 3 lines
=% - re-indent a block with () or {} (cursor on brace)
=iB - re-indent inner block with {}
gg=G - re-indent entire buffer
]p - paste and adjust indent to current line


Exiting
:w - write (save) the file, but don't exit
:w !sudo tee % - write out the current file using sudo
:wq or :x or ZZ - write (save) and quit
:q - quit (fails if there are unsaved changes)
:q! or ZQ - quit and throw away unsaved changes
:wqa - write (save) and quit on all tabs
Search and replace
/pattern - search for pattern
?pattern - search backward for pattern
\vpattern - 'very magic' pattern: non-alphanumeric characters are interpreted as special regex symbols (no escaping needed)
n - repeat search in same direction
N - repeat search in opposite direction

:s/old_string/new_string/g      - replace on 1 line
:%s/old_string/new_string/g     - replace all old with new throughout file
:%s/old_string/new_string/gc    - replace all old with new throughout file with confirmations

:noh[lsearch] - remove highlighting of search matches


Search in multiple files
:vim[grep] /pattern/ {`{file}`} - search for pattern in multiple files
e.g. :vim[grep] /foo/ **/*
:cn[ext] - jump to the next match
:cp[revious] - jump to the previous match
:cope[n] - open a window containing the list of matches
:ccl[ose] - close the quickfix window
Tabs
:tabnew or :tabnew {page.words.file} - open a file in a new tab
Ctrl + wT - move the current split window into its own tab
gt or :tabn[ext] - move to the next tab
gT or :tabp[revious] - move to the previous tab
#gt - move to tab number #
:tabm[ove] # - move current tab to the #th position (indexed from 0)
:tabc[lose] - close the current tab and all its windows
:tabo[nly] - close all tabs except for the current one
:tabdo command - run the command on all tabs (e.g. :tabdo q - closes all opened tabs)


find and replace text
:5,12s/foo/bar/g


f<char> search char=chu cai can tim
/{find_text} forward=right=next search
?{find_text} backward=left=previous search
={code vim}

-------------------------------------------------------------------------

                    visual mode: select contents
    che do chon nhieu words, lines

*: select all word giong nhau 
*: NEXT hightlight text

vjj: chon them 2 line
vG: full below lines
o: go to end highlight text
vit: goto contents html
U: uppercase
/find_text<CR>: select contents from cursor to ge

---------------------------------------------------------------------
